
/**
 * An implementation of the Revised Group Multi-role assignment with CPLEX;
 * This is for the special example, m = 18, n =600, Q is in "Q.txt". 
 * There are 20 industries and 30 regions with names. 
 * Haibin Zhu, Dec. 20, 2020
 * Please cite:
 [1] H. Zhu (2021), “Why Did Mr. Trump Oppose Globalization? An E-CARGO Approach,” IEEE Trans. on Computational Social Systems,, vol. 8, no. 6, Dec. 2021, pp. 1333–1343.
 [2] H. Zhu, E-CARGO and Role-Based Collaboration: Modeling and Solving Problems in the Complex World, Wiley-IEEE Press, NJ, USA, Dec. 2021. 
 [3] H. Zhu, M.C. Zhou, and R. Alkins, “Group Role Assignment via a Kuhn-Munkres Algorithm-based Solution”, IEEE Trans. on Systems, Man, and Cybernetics, Part A: Systems and Humans, vol. 42, no. 3, May 2012, pp. 739-750.
 [4] H. Zhu, and M. Zhou, “Role-Based Collaboration and its Kernel Mechanisms,” IEEE Trans. on Systems, Man, and Cybernetics, Part C: Applications and Reviews, vol. 36, no. 4, July. 2006, pp. 578-589.
 */


import ilog.concert.*;
import ilog.cplex.*;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;


import java.text.DecimalFormat;
import java.util.*;


class TestResult
{

	public double USA;
	public double Global;
	public double USA_n_g;
	public TestResult()
	{
		USA=0;
		Global =0;
		USA_n_g=0;
	}
}
class Arrays{
	static void fill (int [] vec, int val){
		for (int i =0; i< vec.length; i++) vec[i]=val;
	}
}

class RGMRA_ILOG {
	
	private int m;	//number of agents
	private int n;	//number of roles
	
	private double[] Q;	//Qualification matrix
	private int[] LA;	//Agent Limit
	private int[] L;	//Role Requirement array
	private int[][] A;  //Assignment array
	private int gama;
	
	DecimalFormat df = new DecimalFormat("0.00");
	
	double optimized_result = 0;
	boolean bILOG_result;
	
	public RGMRA_ILOG(int nagent, int nrole, double[][] QM, int[]RA, int[] AA, int Gama)
	{
		m = nagent;
		n = nrole;
		
		Q = new double[m*n];
		for(int i=0, r=0; r<m; r++) for (int c=0; c<n; c++){Q[i] = QM[r][c]; i++; }
		
		L = new int[n];
		for(int j=0; j<n; j++) {L[j] = RA[j]; }
		
		LA = new int[m];
		for(int i=0; i<m; i++) {LA[i] = AA[i]; }
		
		A = new int[m][n];
		for(int r=0; r<m; r++) for (int c=0; c<n; c++) A[r][c] = 0;
		gama = Gama;
		}
	
	public double resolve(int[][]TR)
	{
		try
		{
			//Creat cplex obj
			IloCplex cplex = new IloCplex();	//initialize the cplex object
			
			IloIntVar[]x = cplex.intVarArray(m*n, 0, gama);	//initialize the variables array under cplex.
			cplex.addMaximize(cplex.scalProd(x, Q));	//add the optimize objective to cplex.
			
			//Add Constraint 1: L[j];Not needed. 
	/*		
			for (int j = 0; j<n; j++)
			{
				IloLinearNumExpr exprReqConstraint = cplex.linearNumExpr();
				for (int i = 0; i<m; i++)
				{
					exprReqConstraint.addTerm(1, x[j+i*n]);
				}
				cplex.addEq(exprReqConstraint, L[j]);				
			}
	*/		
			//Constrain type 2: LA[i] The agent limit constrains. 
			
			for (int i=0; i<m; i++) // for each agent
			{
				IloLinearNumExpr exprAgentLimitConstraint = cplex.linearNumExpr();
				for (int j = 0; j<n; j++)
				{
					exprAgentLimitConstraint.addTerm(1, x[j+i*n]);
				}
				cplex.addLe(exprAgentLimitConstraint, LA[i]);				
			}
						
			//Solve LP
			//long t1 = System.nanoTime();
			if (cplex.solve()) 
			{
				bILOG_result = true;
				optimized_result = cplex.getObjValue();
				
				double[] val = cplex.getValues(x);
				int ncols = cplex.getNcols();
				//cplex.output().println("Num COL: " + ncols);
				
	//			cplex.output().println("Result Table: " );
	//			System.out.println("sigma="+optimized_result);
				
				for (int j=0; j<ncols; j++)
				{
					A[j/n][j%n] = (int)val[j]; 
//					System.out.print(A[j/n][j%n] + " ");
					TR[j/n][j%n] = A[j/n][j%n];
					//System.out.print(val[j]+ "	");
//					if ((j+1)%(n) == 0) {System.out.print("\n");}	
				}
				//TR = A;
				cplex.end();
				
			}
			else
			{
				cplex.end();
				bILOG_result = true;
			}	
			//long t2 = System.nanoTime();
			//time[0] = (t2-t1)/1000000;
		}
		catch (IloException e){System.err.println("Concert exception" + e + " caught");}
		
		
		return(optimized_result);
	}
	
	public double getOptimizedResult()
	{
		return optimized_result;
		
	}
};

public class RGMRA {
	public static String [] Capitals = 
		{"BlackRock", "Vanguard Group", "JP Morgan Chase", "Bank of America Merrill Lynch", "State Street Global Advisors", "Fidelity Investments (FMR)", "Bank of New York Mellon", "Capital Group", "Goldman Sachs Group", "Prudential Financial", "Morgan Stanley & Co.", "Allianz SE (PIMCO)", "Allianz SE (PIMCO)", "UBS", "Barclays plc", "AXA Group", "Credit Suisse", "Amundi/Credit Agricole"};
	public static String [] Industries =
		{
				"Agriculture, forestry, fishing and hunting", 
				"Mining, quarrying, and oil and gas extraction",
				"Utilities", 
				"Construction", 
				"Manufacturing", 
				"Wholesale trade", 
				"Retail trade", 
				"Transportation and warehousing", 
				"Information and cultural industries", 
				"Finance and insurance", 
				"Real estate and rental and leasing", 
				"Professional", 
				"scientific and technical services", 
				"Management of companies and enterprises", 
				"Administrative and support, waste management and remediation services", 
				"Educational services", "Health care and social assistance", 
				"Arts, entertainment and recreation", 
				"Accommodation and food services", 
				"Other services (except public administration)", 
				"Public administration"};
	public static String [] Regions = {
			 "United States", "China", "Japan", "Germany", "United Kingdom", "France", "India", "Italy", "Canada", "Spain", "South Korea", "Australia", "Taiwan", "Switzerland", "Netherlands", "Brazil", "Hong Kong", "Russia", "Mexico", "Belgium", "Sweden", "Austria", "Indonesia", "Poland", "Saudi Arabia", "Singapore", "Turkey", "Denmark", "Thailand", "Portugal"
	};
	
	public static  void printDMatrix (double [][]x, int m, int n){
			DecimalFormat tw = new DecimalFormat("0.00");
			for (int i = 0; i < m; i++)
			{	for (int j =0; j< n; j++)
				{
				System.out.print (tw.format(x[i][j]));		System.out.print (" ");
				}
			System.out.println ();
			}
			System.out.println ();
		}	
		 public static  void printIMatrix (int [][]x, int m, int n){
			DecimalFormat tw = new DecimalFormat("0");
			for (int i = 0; i < m; i++)
			{	for (int j =0; j< n; j++)
				{
				System.out.print (tw.format(x[i][j]));		System.out.print (" ");
				}
			System.out.println ();
			}
			System.out.println ();
		}
		 public static  void printOnesIDMatrix (int [][]x, double [][]y, int m, int n){
			DecimalFormat tw = new DecimalFormat("00");
			DecimalFormat tw1 = new DecimalFormat("0.00");

			for (int i = 0; i < m; i++)
			{	for (int j =0; j< n; j++)
				{
				if (x[i][j]>0) { 
					System.out.print ("T["+i+","+j+"]="+tw.format(x[i][j]));
					System.out.println (",	Q["+i+","+j+"]="+tw1.format(y[i][j])+".");
				}
				}
			}
			System.out.println ();
		}
		 public static  void printOnesIMatrix (int [][]x, int m, int n){
			DecimalFormat tw = new DecimalFormat("00");

			for (int i = 0; i < m; i++)
			{	for (int j =0; j< n; j++)
				{
				if (x[i][j]>0) { 
					System.out.println ("T["+i+","+j+"]="+tw.format(x[i][j]));
				}
				}
			}
			System.out.println ();
		}	
		 public static  void printNamesIMatrix (int [][]x, int m, int n){
				DecimalFormat tw = new DecimalFormat("00");
				DecimalFormat tw1 = new DecimalFormat("0000");
				for (int i = 0; i < m; i++)
				{	for (int j =0; j< n; j++)
					{
					if (x[i][j]>0) System.out.println (""+Capitals[i]+" invests $"+tw1.format(x[i][j]*100)+ "B on "+Industries[j%20]+" in "+ Regions[j/20]+".");		
					}
				}
				System.out.println ();
			}	

		public static void main(String[] args)
			{
				DecimalFormat df = new DecimalFormat("0.00");
				Random generator = new Random();
				TestResult [] testR=new TestResult[100];

				
			//	int kk=0;
		for (int kk=0; kk< 1; kk++){		
			testR[kk]=new TestResult();
		int m = 18, n = 600; 
		int L[]=new int [n];
	//	int r_limit = 54;
	//	int a_limit =54;
		double [][]Q=new double [m][n];
//		int []LA=new int [m];		
		int []LA= {54, 44, 38, 25, 24, 21, 17, 14, 14, 13, 13, 13, 20, 28, 25, 15, 13, 11};
		try 
		{	File myObj = new File("Q.txt");
	      	Scanner myReader = new Scanner(myObj);
	      	int r=0, c=0, cnt=0;
	      	while (myReader.hasNextDouble()) {
	      		c = cnt%600;
	      		r = cnt/600;
	      		double data = myReader.nextDouble();
	      		Q[r][c]=data;
	      		cnt++;	
	      	}
	      	myReader.close();
			BufferedWriter out = new BufferedWriter(new FileWriter(("Result"), true));
			out.write("Q: \n");	// Random Q
			for(int i=0; i<m; i++){
				for(int j=0; j<n; j++){
//					Q[r][c] = generator.nextDouble()*0.3;//The maximum ROI is 30%
					out.write(df.format(Q[r][c]) + "	");
				}
				out.write("\n");
			}
			// Random LA
/*			for(int i = 0; i<m; i++) {
				LA[i]=1+generator.nextInt(a_limit);
			}
			for (int i =0; i<n; i++)	{ 	
				L[i] = generator.nextInt(r_limit)+1;
			}
*/			out.close();
		}
		catch (IOException e) {System.out.println ("Error in writing into a file!");}

		//TEST parameters:
		int[][] TR = new int[m][n];

		double v=0.0f;
	//	int gama = 54;
	//	int gama = 11;
	  int gama = 32;

		RGMRA_ILOG ILOG = new RGMRA_ILOG(m, n, Q, L, LA, gama);
		 v = ILOG.resolve(TR);

		int TR1[][]=new int [12][20];
		double Q1 [][] =new double [12][20];// This is to simulate all the USA capital investing to USA industries. 
		for(int r=0; r<12; r++)
			for(int c=0; c<20; c++)
				Q1[r][c]=Q[r][c];
		RGMRA_ILOG ILOG1 = new RGMRA_ILOG(12, 20, Q1, L, LA, gama);
		 double v1 = ILOG1.resolve(TR1);
		printDMatrix (Q, m, 60);
		printOnesIDMatrix (TR, Q, m, n);
		printNamesIMatrix (TR, m, n);
		printDMatrix (Q1, 12, 20);
		printOnesIDMatrix (TR1, Q1, 12, 20);
		printNamesIMatrix (TR1, 12, 20);
		
		double sigUSA =0;// The gain of USA from all the capital 0-17.
		for(int r=0; r<m; r++)
			for(int c=0; c<20; c++)
				if (TR[r][c]>=1) sigUSA+=TR[r][c]*Q[r][c];
		
		testR[kk].USA=sigUSA;
		testR[kk].Global=v;
		testR[kk].USA_n_g=v1;
		System.out.print ("\n " + df.format(testR[kk].USA));
		System.out.print (" " + df.format(testR[kk].Global));
		System.out.print (" " + df.format(testR[kk].USA_n_g));
		System.out.println();
		int TT=0;
		for (int i =0; i<m; i++) TT+=LA[i];
		System.out.println("Total Capitals: "+TT);
		}
		
	}	
}
